
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRoles {
  ADMIN
  USER
}

enum GameStatus {
  CREATED
  STARTED
  ENDED
  CLOSED
}

enum SponsorStatus {
  ACTIVE
  INACTIVE
  REJECTED
}


model User {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  phoneNumber String      @unique
  email       String      @unique
  password    String
  googleId    String?     @unique
  gender      String
  points      Int         @default(0)
  totalPoints Int         @default(0)
  type        String
  diamonds    Int         @default(0)
  level       Int         @default(0)
  avatar      String?
  dob         DateTime
  country     String
  city        String
  dream       String?
  role        UserRoles
  createAt    DateTime    @default(now())
  games       UserGames[]
  winners     Winners[]
  notifications Notification[]
  reports Report[]
}


model Games {
  id               Int         @id @default(autoincrement())
  name             String
  requiredDiamonds Int
  duration         Int // duration in seconds
  reward           String
  trophyTypes       String[]
  answersId        Int?
  images           String?
  options          String?
  status           GameStatus
  sponsorId       Sponsor[]
  licenseId        String?
  winnerId         Int?
  winners          Winners[]   @relation("GameWinners")
  userGames        UserGames[]
  questions        Question[]
  scratchCard       ScratchCard?
  reports Report[]
}

model Winners {
  id         Int      @id @default(autoincrement())
  rank       Int
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  game       Games    @relation(fields: [gameId], references: [id], name: "GameWinners")
  gameId     Int
  videoProof String // URL or path to the video proof file
  createdAt  DateTime @default(now())
}

model UserGames {
  userId   Int
  gameId   Int
  gameTime Int
  score    Int
  User     User  @relation(fields: [userId], references: [id])
  Games    Games @relation(fields: [gameId], references: [id])

  @@id([userId, gameId]) // Composite primary key
}

model Sponsor {
  id     Int     @id @default(autoincrement())
  name   String
  logo   String
  status SponsorStatus
  games  Games[]
  // description String
  // website     String
}



model Question {
  id        Int       @id @default(autoincrement())
  gameId    Int
  maxTime   Int
  question  String    
  options   Option[]
  quiz      Games      @relation(fields: [gameId], references: [id])
}

model Option {
  id        Int       @id @default(autoincrement())
  questionId Int
  question  Question   @relation(fields: [questionId], references: [id])
  optionText String
  isCorrect Boolean   @default(false)
}

model ScratchCard {
  id   Int    @id @default(autoincrement())
  name String
  gameId Int @unique
  game Games  @relation(fields: [gameId], references: [id])
  // options   options[]
}


model store {
  id        Int @id @default(autoincrement())
  name        String
  price       Int
  productType String

}


model Notification {
  id        Int      @id @default(autoincrement())
  title     String
  message   String
  userId    Int
  user        User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}


model Report {
  id                  Int      @id @default(autoincrement())
  userId              Int
  gameId              Int
  trophyType          String
  sponsorsId          Int
  expenses            Decimal
  additionalExpenses  Decimal
  amount              Decimal
  reportDate          DateTime
  hasTrophy           Boolean
  createdAt           DateTime @default(now())

  user     User   @relation(fields: [userId], references: [id])
  game     Games   @relation(fields: [gameId], references: [id])
}